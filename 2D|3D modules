# Module: TwoDGeometricDataPackets.py
# This module defines 2D geometric data packet classes.

class TwoDGeometricDataPacket:
    def __init__(self, shape, data):
        self.shape = shape
        self.data = data

    def process_data(self):
        # Placeholder for data processing logic specific to 2D shapes
        pass

# Factory function to create 2D geometric data packets
def create_two_d_geometric_data_packet(shape, data):
    valid_shapes = ['triangle', 'circle', 'semi-circle', 'square', 'rectangle',
                    'parallelogram', 'rhombus', 'trapezium', 'kite', 'polygon']
    if shape in valid_shapes:
        return TwoDGeometricDataPacket(shape, data)
    else:
        raise ValueError("Invalid shape for a 2D geometric data packet.")

# Module: ThreeDGeometricDataPackets.py
# This module defines 3D geometric data packet classes.

class ThreeDGeometricDataPacket:
    def __init__(self, shape, data):
        self.shape = shape
        self.data = data

    def process_data(self):
        # Placeholder for data processing logic specific to 3D shapes
        pass

# Factory function to create 3D geometric data packets
def create_three_d_geometric_data_packet(shape, data):
    valid_shapes = ['sphere', 'cube', 'cuboid', 'cone', 'cylinder']
    if shape in valid_shapes:
        return ThreeDGeometricDataPacket(shape, data)
    else:
        raise ValueError("Invalid shape for a 3D geometric data packet.")

# Module: GeometricDataPacketUtils.py
# This utility module provides common operations for geometric data packets.

def calculate_volume_or_area(packet):
    # Placeholder for a method to calculate the volume of 3D shapes or the area of 2D shapes
    pass

def combine_packets(packet_one, packet_two):
    # Placeholder for a method to combine two geometric data packets
    pass

# Example usage of the modules
from TwoDGeometricDataPackets import create_two_d_geometric_data_packet
from ThreeDGeometricDataPackets import create_three_d_geometric_data_packet
from GeometricDataPacketUtils import calculate_volume_or_area, combine_packets

# Create a 2D triangle packet
triangle_data = {'type': 'transaction', 'amount': 100}
triangle_packet = create_two_d_geometric_data_packet('triangle', triangle_data)

# Create a 3D cube packet
cube_data = {'type': 'storage', 'capacity': '1TB'}
cube_packet = create_three_d_geometric_data_packet('cube', cube_data)

# Calculate area or volume
area = calculate_volume_or_area(triangle_packet)
volume = calculate_volume_or_area(cube_packet)

# Combine two packets
combined_packet = combine_packets(triangle_packet, cube_packet)
